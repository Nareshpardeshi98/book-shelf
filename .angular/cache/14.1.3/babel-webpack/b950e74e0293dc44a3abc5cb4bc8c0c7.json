{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:/angular/pr1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.txInternal = exports.taskInternal = exports.queryInternal = exports.executeAndReturnLast = exports.executeAndReturnAll = exports.assertSql = void 0;\n\nconst web_1 = require(\"@databases/sql/web\");\n\nfunction assertSql(query) {\n  if (Array.isArray(query)) {\n    for (const q of query) {\n      if (!(0, web_1.isSqlQuery)(q)) {\n        throw new Error('Invalid query, you must use @databases/sql to create your queries.');\n      }\n    }\n  } else {\n    if (!(0, web_1.isSqlQuery)(query)) {\n      throw new Error('Invalid query, you must use @databases/sql to create your queries.');\n    }\n  }\n}\n\nexports.assertSql = assertSql;\n\nfunction executeAndReturnAll(_x, _x2) {\n  return _executeAndReturnAll.apply(this, arguments);\n}\n\nfunction _executeAndReturnAll() {\n  _executeAndReturnAll = _asyncToGenerator(function* (driver, queries) {\n    return driver.executeAndReturnAll(queries);\n  });\n  return _executeAndReturnAll.apply(this, arguments);\n}\n\nexports.executeAndReturnAll = executeAndReturnAll;\n\nfunction executeAndReturnLast(_x3, _x4) {\n  return _executeAndReturnLast.apply(this, arguments);\n}\n\nfunction _executeAndReturnLast() {\n  _executeAndReturnLast = _asyncToGenerator(function* (driver, queries) {\n    return driver.executeAndReturnLast(queries);\n  });\n  return _executeAndReturnLast.apply(this, arguments);\n}\n\nexports.executeAndReturnLast = executeAndReturnLast;\n\nfunction queryInternal(_x5, _x6, _x7) {\n  return _queryInternal.apply(this, arguments);\n}\n\nfunction _queryInternal() {\n  _queryInternal = _asyncToGenerator(function* (driver, queries, fn) {\n    const hasTransaction = queries.length > 1;\n\n    try {\n      if (hasTransaction) {\n        yield driver.beginTransaction(undefined);\n      }\n\n      const results = yield fn(driver, queries);\n\n      if (hasTransaction) {\n        yield driver.commitTransaction();\n      }\n\n      return results;\n    } catch (ex) {\n      if (hasTransaction) {\n        yield driver.rollbackTransaction();\n      }\n\n      throw ex;\n    }\n  });\n  return _queryInternal.apply(this, arguments);\n}\n\nexports.queryInternal = queryInternal;\n\nfunction taskInternal(_x8, _x9, _x10) {\n  return _taskInternal.apply(this, arguments);\n}\n\nfunction _taskInternal() {\n  _taskInternal = _asyncToGenerator(function* (driver, factories, fn) {\n    const connection = factories.createConnection(driver);\n\n    try {\n      return yield fn(connection);\n    } finally {\n      yield connection.dispose();\n    }\n  });\n  return _taskInternal.apply(this, arguments);\n}\n\nexports.taskInternal = taskInternal;\n\nfunction txInternal(_x11, _x12, _x13, _x14) {\n  return _txInternal.apply(this, arguments);\n}\n\nfunction _txInternal() {\n  _txInternal = _asyncToGenerator(function* (driver, factories, fn, options) {\n    let failureCount = 0;\n\n    while (true) {\n      yield driver.beginTransaction(options);\n      const postCommitSteps = [];\n      const tx = factories.createTransaction(driver, {\n        addPostCommitStep: fn => {\n          postCommitSteps.push(fn);\n        }\n      });\n      let result;\n\n      try {\n        result = yield fn(tx);\n        yield tx.dispose();\n        yield driver.commitTransaction();\n      } catch (ex) {\n        yield tx.dispose();\n        yield driver.rollbackTransaction();\n\n        if (yield driver.shouldRetryTransactionFailure(options, ex, ++failureCount)) {\n          continue;\n        }\n\n        throw ex;\n      }\n\n      for (const step of postCommitSteps) {\n        yield step();\n      }\n\n      return result;\n    }\n  });\n  return _txInternal.apply(this, arguments);\n}\n\nexports.txInternal = txInternal;","map":{"version":3,"names":["Object","defineProperty","exports","value","txInternal","taskInternal","queryInternal","executeAndReturnLast","executeAndReturnAll","assertSql","web_1","require","query","Array","isArray","q","isSqlQuery","Error","driver","queries","fn","hasTransaction","length","beginTransaction","undefined","results","commitTransaction","ex","rollbackTransaction","factories","connection","createConnection","dispose","options","failureCount","postCommitSteps","tx","createTransaction","addPostCommitStep","push","result","shouldRetryTransactionFailure","step"],"sources":["D:/angular/pr1/node_modules/@databases/shared/lib/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.txInternal = exports.taskInternal = exports.queryInternal = exports.executeAndReturnLast = exports.executeAndReturnAll = exports.assertSql = void 0;\nconst web_1 = require(\"@databases/sql/web\");\nfunction assertSql(query) {\n    if (Array.isArray(query)) {\n        for (const q of query) {\n            if (!(0, web_1.isSqlQuery)(q)) {\n                throw new Error('Invalid query, you must use @databases/sql to create your queries.');\n            }\n        }\n    }\n    else {\n        if (!(0, web_1.isSqlQuery)(query)) {\n            throw new Error('Invalid query, you must use @databases/sql to create your queries.');\n        }\n    }\n}\nexports.assertSql = assertSql;\nasync function executeAndReturnAll(driver, queries) {\n    return driver.executeAndReturnAll(queries);\n}\nexports.executeAndReturnAll = executeAndReturnAll;\nasync function executeAndReturnLast(driver, queries) {\n    return driver.executeAndReturnLast(queries);\n}\nexports.executeAndReturnLast = executeAndReturnLast;\nasync function queryInternal(driver, queries, fn) {\n    const hasTransaction = queries.length > 1;\n    try {\n        if (hasTransaction) {\n            await driver.beginTransaction(undefined);\n        }\n        const results = await fn(driver, queries);\n        if (hasTransaction) {\n            await driver.commitTransaction();\n        }\n        return results;\n    }\n    catch (ex) {\n        if (hasTransaction) {\n            await driver.rollbackTransaction();\n        }\n        throw ex;\n    }\n}\nexports.queryInternal = queryInternal;\nasync function taskInternal(driver, factories, fn) {\n    const connection = factories.createConnection(driver);\n    try {\n        return await fn(connection);\n    }\n    finally {\n        await connection.dispose();\n    }\n}\nexports.taskInternal = taskInternal;\nasync function txInternal(driver, factories, fn, options) {\n    let failureCount = 0;\n    while (true) {\n        await driver.beginTransaction(options);\n        const postCommitSteps = [];\n        const tx = factories.createTransaction(driver, {\n            addPostCommitStep: (fn) => {\n                postCommitSteps.push(fn);\n            },\n        });\n        let result;\n        try {\n            result = await fn(tx);\n            await tx.dispose();\n            await driver.commitTransaction();\n        }\n        catch (ex) {\n            await tx.dispose();\n            await driver.rollbackTransaction();\n            if (await driver.shouldRetryTransactionFailure(options, ex, ++failureCount)) {\n                continue;\n            }\n            throw ex;\n        }\n        for (const step of postCommitSteps) {\n            await step();\n        }\n        return result;\n    }\n}\nexports.txInternal = txInternal;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}