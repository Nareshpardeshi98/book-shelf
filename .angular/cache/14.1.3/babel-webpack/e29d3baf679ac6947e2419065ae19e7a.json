{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isSqlQuery = exports.sql = void 0;\n\nconst url_1 = require(\"url\");\n\nconst mysql_config_1 = require(\"@databases/mysql-config\");\n\nconst sql_1 = require(\"@databases/sql\");\n\nexports.sql = sql_1.default;\nObject.defineProperty(exports, \"isSqlQuery\", {\n  enumerable: true,\n  get: function () {\n    return sql_1.isSqlQuery;\n  }\n});\n\nconst ConnectionPool_1 = require(\"./ConnectionPool\");\n\nconst {\n  connectionStringEnvironmentVariable\n} = (0, mysql_config_1.getMySqlConfigSync)();\n\nfunction createConnectionPool(connectionConfig = process.env[connectionStringEnvironmentVariable]) {\n  const connectionConfigObject = typeof connectionConfig === 'object' ? connectionConfig : {\n    connectionString: connectionConfig\n  };\n  const {\n    connectionString = process.env[connectionStringEnvironmentVariable]\n  } = connectionConfigObject;\n\n  if (!connectionString) {\n    throw new Error('You must provide a connection string for @databases/mysql. You can ' + 'either pass one directly to the createConnection call or set ' + `the ${connectionStringEnvironmentVariable} environment variable.`);\n  }\n\n  validateMySqlUrl(connectionString);\n  const {\n    tinyIntMode = 'number',\n    bigIntMode = 'number',\n    dateMode = 'date-object',\n    dateTimeMode = 'date-object',\n    timeStampMode = 'date-object',\n    timeZone = {\n      client: 'local'\n    },\n    poolSize = 10,\n    maxUses = Infinity,\n    idleTimeoutMilliseconds = 30000,\n    queueTimeoutMilliseconds = 60000,\n    acquireLockTimeoutMilliseconds = 60000,\n    onConnectionClosed,\n    onConnectionOpened,\n    onQueryStart,\n    onQueryResults,\n    onQueryError,\n    onError = err => {\n      console.warn(`Error in MySQL ConnectionPool: ${err.message}`);\n    }\n  } = connectionConfigObject;\n  const serverTimeZone = typeof timeZone === 'string' ? timeZone : timeZone.server;\n  const clientTimeZone = typeof timeZone === 'string' ? timeZone : timeZone.client;\n  const tinyIntParser = getTinyIntParser(tinyIntMode);\n  const bigIntParser = getBigIntParser(bigIntMode);\n  const dateParer = getDateParser(dateMode, clientTimeZone);\n  const dateTimeParser = getDateTimeParser(dateTimeMode, clientTimeZone);\n  const timeStampParser = getDateTimeParser(timeStampMode, clientTimeZone);\n  return new ConnectionPool_1.default({\n    uri: connectionString,\n    multipleStatements: true,\n    timezone: clientTimeZone === 'utc' ? 'Z' : clientTimeZone,\n    typeCast: (field, next) => {\n      switch (field.type) {\n        case 'TINY':\n          return tinyIntParser(field);\n\n        case 'LONGLONG':\n          return bigIntParser(field);\n\n        case 'DATE':\n          return dateParer(field);\n\n        case 'DATETIME':\n          return dateTimeParser(field);\n\n        case 'TIMESTAMP':\n          return timeStampParser(field);\n      }\n\n      return next();\n    }\n  }, {\n    maxSize: poolSize,\n    maxUses,\n    idleTimeoutMilliseconds,\n    queueTimeoutMilliseconds\n  }, {\n    onConnectionClosed,\n    onConnectionOpened,\n    onQueryStart,\n    onQueryResults,\n    onQueryError\n  }, onError, acquireLockTimeoutMilliseconds, serverTimeZone);\n}\n\nexports.default = createConnectionPool;\n\nfunction validateMySqlUrl(urlString) {\n  let url;\n\n  try {\n    url = new url_1.URL(urlString);\n  } catch (ex) {\n    throw new Error('Invalid MySQL connection string, expected a URI: ' + urlString);\n  }\n\n  if (url.protocol !== 'mysqlx:' && url.protocol !== 'mysql:') {\n    throw new Error('Invalid MySQL connection string, expected protocol to be \"mysql\" or \"mysqlx\": ' + urlString);\n  }\n}\n\nfunction getTinyIntParser(mode) {\n  switch (mode) {\n    case 'number':\n      return f => parseInt(f.string(), 10);\n\n    case 'boolean':\n      return f => f.string() !== '0';\n  }\n}\n\nfunction getBigIntParser(mode) {\n  switch (mode) {\n    case 'number':\n      return f => parseInt(f.string(), 10);\n\n    case 'string':\n      return f => f.string();\n\n    case 'bigint':\n      return f => BigInt(f.string());\n  }\n}\n\nfunction getDateParser(mode, timeZone) {\n  switch (mode) {\n    case 'string':\n      return f => f.string();\n\n    case 'date-object':\n      return f => {\n        const match = /^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/.exec(f.string());\n\n        if (!match) {\n          throw new Error('Expected yyyy-mm-dd');\n        }\n\n        if (timeZone === 'utc') {\n          return new Date(Date.UTC(parseInt(match[1], 10), parseInt(match[2], 10) - 1, parseInt(match[3], 10), 0, 0, 0, 0));\n        } else {\n          return new Date(parseInt(match[1], 10), parseInt(match[2], 10) - 1, parseInt(match[3], 10), 0, 0, 0, 0);\n        }\n      };\n  }\n}\n\nfunction getDateTimeParser(mode, timeZone) {\n  switch (mode) {\n    case 'string':\n      return f => f.string();\n\n    case 'date-object':\n      return f => {\n        var _a, _b;\n\n        const fBuffer = f.buffer();\n\n        if (fBuffer === null || fBuffer.length === 0) {\n          return null;\n        }\n\n        const match = /^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2})\\:(\\d{2})\\:(\\d{2})(?:\\.(\\d+))?$/.exec(fBuffer.toString());\n\n        if (!match) {\n          throw new Error('Expected yyyy-mm-dd HH:MM:SS');\n        }\n\n        let ms = match[7] ? parseInt(match[7].length > 3 ? match[7].substr(0, 3) : match[7], 10) : 0;\n\n        if (((_a = match[7]) === null || _a === void 0 ? void 0 : _a.length) === 2) {\n          ms = ms * 10;\n        }\n\n        if (((_b = match[7]) === null || _b === void 0 ? void 0 : _b.length) === 1) {\n          ms = ms * 100;\n        }\n\n        if (timeZone === 'utc') {\n          return new Date(Date.UTC(parseInt(match[1], 10), parseInt(match[2], 10) - 1, parseInt(match[3], 10), parseInt(match[4], 10), // hours\n          parseInt(match[5], 10), // minutes\n          parseInt(match[6], 10), // seconds\n          ms));\n        } else {\n          return new Date(parseInt(match[1], 10), parseInt(match[2], 10) - 1, parseInt(match[3], 10), parseInt(match[4], 10), // hours\n          parseInt(match[5], 10), // minutes\n          parseInt(match[6], 10), // seconds\n          ms);\n        }\n      };\n  }\n}\n\nmodule.exports = Object.assign(createConnectionPool, {\n  default: createConnectionPool,\n  sql: sql_1.default,\n  isSqlQuery: sql_1.isSqlQuery\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","isSqlQuery","sql","url_1","require","mysql_config_1","sql_1","default","enumerable","get","ConnectionPool_1","connectionStringEnvironmentVariable","getMySqlConfigSync","createConnectionPool","connectionConfig","process","env","connectionConfigObject","connectionString","Error","validateMySqlUrl","tinyIntMode","bigIntMode","dateMode","dateTimeMode","timeStampMode","timeZone","client","poolSize","maxUses","Infinity","idleTimeoutMilliseconds","queueTimeoutMilliseconds","acquireLockTimeoutMilliseconds","onConnectionClosed","onConnectionOpened","onQueryStart","onQueryResults","onQueryError","onError","err","console","warn","message","serverTimeZone","server","clientTimeZone","tinyIntParser","getTinyIntParser","bigIntParser","getBigIntParser","dateParer","getDateParser","dateTimeParser","getDateTimeParser","timeStampParser","uri","multipleStatements","timezone","typeCast","field","next","type","maxSize","urlString","url","URL","ex","protocol","mode","f","parseInt","string","BigInt","match","exec","Date","UTC","_a","_b","fBuffer","buffer","length","toString","ms","substr","module","assign"],"sources":["D:/angular/pr1/node_modules/@databases/mysql/lib/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isSqlQuery = exports.sql = void 0;\nconst url_1 = require(\"url\");\nconst mysql_config_1 = require(\"@databases/mysql-config\");\nconst sql_1 = require(\"@databases/sql\");\nexports.sql = sql_1.default;\nObject.defineProperty(exports, \"isSqlQuery\", { enumerable: true, get: function () { return sql_1.isSqlQuery; } });\nconst ConnectionPool_1 = require(\"./ConnectionPool\");\nconst { connectionStringEnvironmentVariable } = (0, mysql_config_1.getMySqlConfigSync)();\nfunction createConnectionPool(connectionConfig = process.env[connectionStringEnvironmentVariable]) {\n    const connectionConfigObject = typeof connectionConfig === 'object'\n        ? connectionConfig\n        : { connectionString: connectionConfig };\n    const { connectionString = process.env[connectionStringEnvironmentVariable] } = connectionConfigObject;\n    if (!connectionString) {\n        throw new Error('You must provide a connection string for @databases/mysql. You can ' +\n            'either pass one directly to the createConnection call or set ' +\n            `the ${connectionStringEnvironmentVariable} environment variable.`);\n    }\n    validateMySqlUrl(connectionString);\n    const { tinyIntMode = 'number', bigIntMode = 'number', dateMode = 'date-object', dateTimeMode = 'date-object', timeStampMode = 'date-object', timeZone = { client: 'local' }, poolSize = 10, maxUses = Infinity, idleTimeoutMilliseconds = 30000, queueTimeoutMilliseconds = 60000, acquireLockTimeoutMilliseconds = 60000, onConnectionClosed, onConnectionOpened, onQueryStart, onQueryResults, onQueryError, onError = (err) => {\n        console.warn(`Error in MySQL ConnectionPool: ${err.message}`);\n    }, } = connectionConfigObject;\n    const serverTimeZone = typeof timeZone === 'string' ? timeZone : timeZone.server;\n    const clientTimeZone = typeof timeZone === 'string' ? timeZone : timeZone.client;\n    const tinyIntParser = getTinyIntParser(tinyIntMode);\n    const bigIntParser = getBigIntParser(bigIntMode);\n    const dateParer = getDateParser(dateMode, clientTimeZone);\n    const dateTimeParser = getDateTimeParser(dateTimeMode, clientTimeZone);\n    const timeStampParser = getDateTimeParser(timeStampMode, clientTimeZone);\n    return new ConnectionPool_1.default({\n        uri: connectionString,\n        multipleStatements: true,\n        timezone: clientTimeZone === 'utc' ? 'Z' : clientTimeZone,\n        typeCast: (field, next) => {\n            switch (field.type) {\n                case 'TINY':\n                    return tinyIntParser(field);\n                case 'LONGLONG':\n                    return bigIntParser(field);\n                case 'DATE':\n                    return dateParer(field);\n                case 'DATETIME':\n                    return dateTimeParser(field);\n                case 'TIMESTAMP':\n                    return timeStampParser(field);\n            }\n            return next();\n        },\n    }, {\n        maxSize: poolSize,\n        maxUses,\n        idleTimeoutMilliseconds,\n        queueTimeoutMilliseconds,\n    }, {\n        onConnectionClosed,\n        onConnectionOpened,\n        onQueryStart,\n        onQueryResults,\n        onQueryError,\n    }, onError, acquireLockTimeoutMilliseconds, serverTimeZone);\n}\nexports.default = createConnectionPool;\nfunction validateMySqlUrl(urlString) {\n    let url;\n    try {\n        url = new url_1.URL(urlString);\n    }\n    catch (ex) {\n        throw new Error('Invalid MySQL connection string, expected a URI: ' + urlString);\n    }\n    if (url.protocol !== 'mysqlx:' && url.protocol !== 'mysql:') {\n        throw new Error('Invalid MySQL connection string, expected protocol to be \"mysql\" or \"mysqlx\": ' +\n            urlString);\n    }\n}\nfunction getTinyIntParser(mode) {\n    switch (mode) {\n        case 'number':\n            return (f) => parseInt(f.string(), 10);\n        case 'boolean':\n            return (f) => f.string() !== '0';\n    }\n}\nfunction getBigIntParser(mode) {\n    switch (mode) {\n        case 'number':\n            return (f) => parseInt(f.string(), 10);\n        case 'string':\n            return (f) => f.string();\n        case 'bigint':\n            return (f) => BigInt(f.string());\n    }\n}\nfunction getDateParser(mode, timeZone) {\n    switch (mode) {\n        case 'string':\n            return (f) => f.string();\n        case 'date-object':\n            return (f) => {\n                const match = /^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/.exec(f.string());\n                if (!match) {\n                    throw new Error('Expected yyyy-mm-dd');\n                }\n                if (timeZone === 'utc') {\n                    return new Date(Date.UTC(parseInt(match[1], 10), parseInt(match[2], 10) - 1, parseInt(match[3], 10), 0, 0, 0, 0));\n                }\n                else {\n                    return new Date(parseInt(match[1], 10), parseInt(match[2], 10) - 1, parseInt(match[3], 10), 0, 0, 0, 0);\n                }\n            };\n    }\n}\nfunction getDateTimeParser(mode, timeZone) {\n    switch (mode) {\n        case 'string':\n            return (f) => f.string();\n        case 'date-object':\n            return (f) => {\n                var _a, _b;\n                const fBuffer = f.buffer();\n                if (fBuffer === null || fBuffer.length === 0) {\n                    return null;\n                }\n                const match = /^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2})\\:(\\d{2})\\:(\\d{2})(?:\\.(\\d+))?$/.exec(fBuffer.toString());\n                if (!match) {\n                    throw new Error('Expected yyyy-mm-dd HH:MM:SS');\n                }\n                let ms = match[7]\n                    ? parseInt(match[7].length > 3 ? match[7].substr(0, 3) : match[7], 10)\n                    : 0;\n                if (((_a = match[7]) === null || _a === void 0 ? void 0 : _a.length) === 2) {\n                    ms = ms * 10;\n                }\n                if (((_b = match[7]) === null || _b === void 0 ? void 0 : _b.length) === 1) {\n                    ms = ms * 100;\n                }\n                if (timeZone === 'utc') {\n                    return new Date(Date.UTC(parseInt(match[1], 10), parseInt(match[2], 10) - 1, parseInt(match[3], 10), parseInt(match[4], 10), // hours\n                    parseInt(match[5], 10), // minutes\n                    parseInt(match[6], 10), // seconds\n                    ms));\n                }\n                else {\n                    return new Date(parseInt(match[1], 10), parseInt(match[2], 10) - 1, parseInt(match[3], 10), parseInt(match[4], 10), // hours\n                    parseInt(match[5], 10), // minutes\n                    parseInt(match[6], 10), // seconds\n                    ms);\n                }\n            };\n    }\n}\nmodule.exports = Object.assign(createConnectionPool, {\n    default: createConnectionPool,\n    sql: sql_1.default,\n    isSqlQuery: sql_1.isSqlQuery,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}