{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:/angular/pr1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst stream_1 = require(\"stream\");\n\nconst shared_1 = require(\"@databases/shared\");\n\nconst sql_1 = require(\"@databases/sql\");\n\nconst promise_1 = require(\"mysql2/promise\");\n\nconst Connection_1 = require(\"./Connection\");\n\nconst Transaction_1 = require(\"./Transaction\");\n\nconst MySqlDriver_1 = require(\"./MySqlDriver\");\n\nconst factories = {\n  createTransaction(driver, transactionParentContext) {\n    return new Transaction_1.default(driver, factories, transactionParentContext);\n  },\n\n  createConnection(driver) {\n    return new Connection_1.default(driver, factories);\n  }\n\n};\n\nconst getConnectionPoolOptions = (srcConfig, poolOptions, handlers, onError, acquireLockTimeoutMilliseconds, serverTimeZone) => {\n  return { ...poolOptions,\n    openConnection: function () {\n      var _ref = _asyncToGenerator(function* (removeFromPool) {\n        const client = yield (0, promise_1.createConnection)(srcConfig);\n        const driver = new MySqlDriver_1.default(client, handlers, acquireLockTimeoutMilliseconds);\n\n        try {\n          if (serverTimeZone === 'utc') {\n            yield driver.client.query(`SET time_zone = \"+00:00\";`);\n          } else if (serverTimeZone === 'local') {\n            yield driver.client.query(`SET time_zone = ?;`, [Intl.DateTimeFormat().resolvedOptions().timeZone]);\n          }\n        } catch (ex) {\n          void driver.dispose();\n          throw ex;\n        }\n\n        driver.onAddingToPool(removeFromPool, onError);\n\n        if (handlers.onConnectionOpened) {\n          handlers.onConnectionOpened();\n        }\n\n        return driver;\n      });\n\n      return function openConnection(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    closeConnection: function () {\n      var _ref2 = _asyncToGenerator(function* (driver) {\n        try {\n          yield driver.dispose();\n\n          if (handlers.onConnectionClosed) {\n            handlers.onConnectionClosed();\n          }\n        } catch (ex) {\n          console.warn(ex.message);\n        }\n      });\n\n      return function closeConnection(_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n\n    onActive(driver) {\n      driver.onActive();\n    },\n\n    onIdle(driver) {\n      driver.onIdle();\n    }\n\n  };\n};\n\nclass ConnectionPool extends shared_1.BaseConnectionPool {\n  constructor(srcConfig, poolOptions, handlers, onError, acquireLockTimeoutMilliseconds, serverTimeZone) {\n    super(getConnectionPoolOptions(srcConfig, poolOptions, handlers, onError, acquireLockTimeoutMilliseconds, serverTimeZone), factories);\n    this.sql = sql_1.default;\n  }\n\n  queryNodeStream(query, options = {}) {\n    this._throwIfDisposed();\n\n    const stream = new stream_1.PassThrough({\n      objectMode: true\n    });\n\n    this._pool.getConnection().then( /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (driver) {\n        let released = false;\n        const connectionStream = driver.connection.queryNodeStream(query, options);\n        return connectionStream.on('fields', fields => {\n          stream.emit('fields', fields);\n        }).on('error', err => {\n          if (!released) {\n            released = true;\n            driver.dispose();\n          }\n\n          stream.emit('error', err);\n        }).on('end', () => {\n          if (!released) {\n            released = true;\n            driver.release();\n          }\n\n          stream.emit('end');\n        }).pipe(stream);\n      });\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()).catch(ex => stream.emit('error', ex));\n\n    return stream;\n  }\n\n}\n\nexports.default = ConnectionPool;","map":{"version":3,"names":["Object","defineProperty","exports","value","stream_1","require","shared_1","sql_1","promise_1","Connection_1","Transaction_1","MySqlDriver_1","factories","createTransaction","driver","transactionParentContext","default","createConnection","getConnectionPoolOptions","srcConfig","poolOptions","handlers","onError","acquireLockTimeoutMilliseconds","serverTimeZone","openConnection","removeFromPool","client","query","Intl","DateTimeFormat","resolvedOptions","timeZone","ex","dispose","onAddingToPool","onConnectionOpened","closeConnection","onConnectionClosed","console","warn","message","onActive","onIdle","ConnectionPool","BaseConnectionPool","constructor","sql","queryNodeStream","options","_throwIfDisposed","stream","PassThrough","objectMode","_pool","getConnection","then","released","connectionStream","connection","on","fields","emit","err","release","pipe","catch"],"sources":["D:/angular/pr1/node_modules/@databases/mysql/lib/ConnectionPool.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream_1 = require(\"stream\");\nconst shared_1 = require(\"@databases/shared\");\nconst sql_1 = require(\"@databases/sql\");\nconst promise_1 = require(\"mysql2/promise\");\nconst Connection_1 = require(\"./Connection\");\nconst Transaction_1 = require(\"./Transaction\");\nconst MySqlDriver_1 = require(\"./MySqlDriver\");\nconst factories = {\n    createTransaction(driver, transactionParentContext) {\n        return new Transaction_1.default(driver, factories, transactionParentContext);\n    },\n    createConnection(driver) {\n        return new Connection_1.default(driver, factories);\n    },\n};\nconst getConnectionPoolOptions = (srcConfig, poolOptions, handlers, onError, acquireLockTimeoutMilliseconds, serverTimeZone) => {\n    return {\n        ...poolOptions,\n        openConnection: async (removeFromPool) => {\n            const client = await (0, promise_1.createConnection)(srcConfig);\n            const driver = new MySqlDriver_1.default(client, handlers, acquireLockTimeoutMilliseconds);\n            try {\n                if (serverTimeZone === 'utc') {\n                    await driver.client.query(`SET time_zone = \"+00:00\";`);\n                }\n                else if (serverTimeZone === 'local') {\n                    await driver.client.query(`SET time_zone = ?;`, [\n                        Intl.DateTimeFormat().resolvedOptions().timeZone,\n                    ]);\n                }\n            }\n            catch (ex) {\n                void driver.dispose();\n                throw ex;\n            }\n            driver.onAddingToPool(removeFromPool, onError);\n            if (handlers.onConnectionOpened) {\n                handlers.onConnectionOpened();\n            }\n            return driver;\n        },\n        closeConnection: async (driver) => {\n            try {\n                await driver.dispose();\n                if (handlers.onConnectionClosed) {\n                    handlers.onConnectionClosed();\n                }\n            }\n            catch (ex) {\n                console.warn(ex.message);\n            }\n        },\n        onActive(driver) {\n            driver.onActive();\n        },\n        onIdle(driver) {\n            driver.onIdle();\n        },\n    };\n};\nclass ConnectionPool extends shared_1.BaseConnectionPool {\n    constructor(srcConfig, poolOptions, handlers, onError, acquireLockTimeoutMilliseconds, serverTimeZone) {\n        super(getConnectionPoolOptions(srcConfig, poolOptions, handlers, onError, acquireLockTimeoutMilliseconds, serverTimeZone), factories);\n        this.sql = sql_1.default;\n    }\n    queryNodeStream(query, options = {}) {\n        this._throwIfDisposed();\n        const stream = new stream_1.PassThrough({\n            objectMode: true,\n        });\n        this._pool\n            .getConnection()\n            .then(async (driver) => {\n            let released = false;\n            const connectionStream = driver.connection.queryNodeStream(query, options);\n            return connectionStream\n                .on('fields', (fields) => {\n                stream.emit('fields', fields);\n            })\n                .on('error', (err) => {\n                if (!released) {\n                    released = true;\n                    driver.dispose();\n                }\n                stream.emit('error', err);\n            })\n                .on('end', () => {\n                if (!released) {\n                    released = true;\n                    driver.release();\n                }\n                stream.emit('end');\n            })\n                .pipe(stream);\n        })\n            .catch((ex) => stream.emit('error', ex));\n        return stream;\n    }\n}\nexports.default = ConnectionPool;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}