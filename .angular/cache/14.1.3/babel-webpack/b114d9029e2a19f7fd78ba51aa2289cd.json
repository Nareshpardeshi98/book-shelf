{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasSemicolonBeforeEnd = exports.hasValues = void 0;\n\nconst web_1 = require(\"@databases/sql/web\");\n\nfunction hasValuesFormatter(query) {\n  return query.some(q => q.type === web_1.SQLItemType.VALUE);\n}\n/**\n * Test whether the query has any parameters, or whether it is just a static\n * string. Returns `true` if there are parameters.\n */\n\n\nfunction hasValues(query) {\n  return query.format(hasValuesFormatter);\n}\n\nexports.hasValues = hasValues;\n\nfunction hasSemicolonBeforeEndFormatter(query) {\n  return query.some((q, i) => {\n    if (q.type !== web_1.SQLItemType.RAW) return false;\n\n    if (i === query.length - 1) {\n      const text = q.text.trim();\n      const index = text.indexOf(';');\n      return index !== -1 && index < text.length - 1;\n    }\n\n    return q.text.includes(';');\n  });\n}\n/**\n * A faster test for whether an SQLQuery is likely to contain multiple statements\n *\n * It is possible for a single query to return `true` if it has a `;` in a comment\n * or in a string literal/identifier name. If `hasSemicolonBeforeEnd` returns `false`\n * you can trust that the query is a single statement.\n */\n\n\nfunction hasSemicolonBeforeEnd(query) {\n  return query.format(hasSemicolonBeforeEndFormatter);\n}\n\nexports.hasSemicolonBeforeEnd = hasSemicolonBeforeEnd;\n\nfunction splitSqlQueryParts(query) {\n  let parts = [];\n  const queries = [parts];\n  let quoteChar;\n  let lineCommentStart = false;\n  let isLineComment = false;\n  let blockCommentStart = false;\n  let isBlockComment = false;\n  let isBlockCommentPrinted = false;\n  let isBlockCommentFirstChar = false;\n  let isBlockCommentEnd = false; // https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-DOLLAR-QUOTING\n  // The tag, if any, of a dollar-quoted string follows the same rules as an unquoted identifier,\n  // except that it cannot contain a dollar sign. Tags are case sensitive, so $tag$String content$tag$\n  // is correct, but $TAG$String content$tag$ is not.\n\n  let dollarQuoteStart = ``;\n  let dollarQuote = ``;\n\n  for (const part of query) {\n    if (part.type === web_1.SQLItemType.RAW) {\n      let str = '';\n\n      for (const char of part.text) {\n        if (lineCommentStart) {\n          lineCommentStart = false;\n\n          if (char === '-') {\n            isLineComment = true;\n          } else {\n            str += '-';\n          }\n        }\n\n        if (blockCommentStart) {\n          blockCommentStart = false;\n\n          if (char === '*') {\n            isBlockCommentFirstChar = true;\n            isBlockComment = true;\n          } else {\n            str += '/';\n          }\n        }\n\n        if (dollarQuoteStart && !dollarQuote) {\n          if (char === `$`) {\n            dollarQuote = `${dollarQuoteStart}$`;\n            dollarQuoteStart = ``;\n            str += char;\n            continue;\n          } else if (/[0-9_]/i.test(char) || // we allow letters with diacritical marks\n          char.toLowerCase() !== char.toUpperCase()) {\n            dollarQuoteStart += char;\n          } else {\n            dollarQuoteStart = ``;\n          }\n        }\n\n        if (isBlockCommentFirstChar) {\n          isBlockCommentFirstChar = false;\n\n          if (char === '*') {\n            isBlockCommentEnd = true;\n          } else if (!/\\s/.test(char)) {\n            isBlockCommentPrinted = true;\n            str += '/*' + char;\n          }\n        } else if (isBlockComment) {\n          if (isBlockCommentPrinted) {\n            str += char;\n          }\n\n          if (isBlockCommentEnd) {\n            isBlockCommentEnd = false;\n\n            if (char === '/') {\n              isBlockComment = false;\n              isBlockCommentPrinted = false;\n            }\n          } else if (char === '*') {\n            isBlockCommentEnd = true;\n          }\n        } else if (isLineComment) {\n          if (char === '\\n') {\n            str += '\\n';\n            isLineComment = false;\n          }\n        } else if (char === quoteChar) {\n          quoteChar = undefined;\n          str += char;\n        } else if (quoteChar) {\n          str += char;\n        } else if (dollarQuote) {\n          if (dollarQuoteStart) {\n            dollarQuoteStart += char;\n\n            if (dollarQuoteStart === dollarQuote) {\n              dollarQuote = ``;\n              dollarQuoteStart = ``;\n            }\n          }\n\n          if (dollarQuote && char === `$`) {\n            dollarQuoteStart = `$`;\n          }\n\n          str += char;\n        } else {\n          switch (char) {\n            case `'`:\n            case `\"`:\n            case '`':\n              quoteChar = char;\n              str += char;\n              break;\n\n            case `$`:\n              dollarQuoteStart = `$`;\n              str += char;\n              break;\n\n            case `-`:\n              lineCommentStart = true;\n              break;\n\n            case `/`:\n              blockCommentStart = true;\n              break;\n\n            case `;`:\n              if (str.trim()) {\n                parts.push({\n                  type: web_1.SQLItemType.RAW,\n                  text: str\n                });\n                str = '';\n              }\n\n              if (parts.length) {\n                parts = [];\n                queries.push(parts);\n              }\n\n              break;\n\n            default:\n              str += char;\n              break;\n          }\n        }\n      }\n\n      if (lineCommentStart) {\n        str += '-';\n      }\n\n      if (blockCommentStart) {\n        str += '/';\n      }\n\n      if (parts.length || str.trim()) {\n        parts.push({\n          type: web_1.SQLItemType.RAW,\n          text: str\n        });\n      }\n    } else {\n      parts.push(part);\n    }\n  }\n\n  return queries.filter(parts => parts.length).map(parts => web_1.default.__dangerous__constructFromParts(parts));\n}\n/**\n * Split an SQLQuery into an array of statements\n */\n\n\nfunction splitSqlQuery(query) {\n  if (!hasSemicolonBeforeEnd(query)) return [query];\n  const split = query.format(splitSqlQueryParts);\n\n  if (split.length <= 1) {\n    return [query];\n  } else {\n    return split;\n  }\n}\n\nexports.default = splitSqlQuery;","map":{"version":3,"names":["Object","defineProperty","exports","value","hasSemicolonBeforeEnd","hasValues","web_1","require","hasValuesFormatter","query","some","q","type","SQLItemType","VALUE","format","hasSemicolonBeforeEndFormatter","i","RAW","length","text","trim","index","indexOf","includes","splitSqlQueryParts","parts","queries","quoteChar","lineCommentStart","isLineComment","blockCommentStart","isBlockComment","isBlockCommentPrinted","isBlockCommentFirstChar","isBlockCommentEnd","dollarQuoteStart","dollarQuote","part","str","char","test","toLowerCase","toUpperCase","undefined","push","filter","map","default","__dangerous__constructFromParts","splitSqlQuery","split"],"sources":["D:/angular/pr1/node_modules/@databases/split-sql-query/lib/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hasSemicolonBeforeEnd = exports.hasValues = void 0;\nconst web_1 = require(\"@databases/sql/web\");\nfunction hasValuesFormatter(query) {\n    return query.some((q) => q.type === web_1.SQLItemType.VALUE);\n}\n/**\n * Test whether the query has any parameters, or whether it is just a static\n * string. Returns `true` if there are parameters.\n */\nfunction hasValues(query) {\n    return query.format(hasValuesFormatter);\n}\nexports.hasValues = hasValues;\nfunction hasSemicolonBeforeEndFormatter(query) {\n    return query.some((q, i) => {\n        if (q.type !== web_1.SQLItemType.RAW)\n            return false;\n        if (i === query.length - 1) {\n            const text = q.text.trim();\n            const index = text.indexOf(';');\n            return index !== -1 && index < text.length - 1;\n        }\n        return q.text.includes(';');\n    });\n}\n/**\n * A faster test for whether an SQLQuery is likely to contain multiple statements\n *\n * It is possible for a single query to return `true` if it has a `;` in a comment\n * or in a string literal/identifier name. If `hasSemicolonBeforeEnd` returns `false`\n * you can trust that the query is a single statement.\n */\nfunction hasSemicolonBeforeEnd(query) {\n    return query.format(hasSemicolonBeforeEndFormatter);\n}\nexports.hasSemicolonBeforeEnd = hasSemicolonBeforeEnd;\nfunction splitSqlQueryParts(query) {\n    let parts = [];\n    const queries = [parts];\n    let quoteChar;\n    let lineCommentStart = false;\n    let isLineComment = false;\n    let blockCommentStart = false;\n    let isBlockComment = false;\n    let isBlockCommentPrinted = false;\n    let isBlockCommentFirstChar = false;\n    let isBlockCommentEnd = false;\n    // https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-DOLLAR-QUOTING\n    // The tag, if any, of a dollar-quoted string follows the same rules as an unquoted identifier,\n    // except that it cannot contain a dollar sign. Tags are case sensitive, so $tag$String content$tag$\n    // is correct, but $TAG$String content$tag$ is not.\n    let dollarQuoteStart = ``;\n    let dollarQuote = ``;\n    for (const part of query) {\n        if (part.type === web_1.SQLItemType.RAW) {\n            let str = '';\n            for (const char of part.text) {\n                if (lineCommentStart) {\n                    lineCommentStart = false;\n                    if (char === '-') {\n                        isLineComment = true;\n                    }\n                    else {\n                        str += '-';\n                    }\n                }\n                if (blockCommentStart) {\n                    blockCommentStart = false;\n                    if (char === '*') {\n                        isBlockCommentFirstChar = true;\n                        isBlockComment = true;\n                    }\n                    else {\n                        str += '/';\n                    }\n                }\n                if (dollarQuoteStart && !dollarQuote) {\n                    if (char === `$`) {\n                        dollarQuote = `${dollarQuoteStart}$`;\n                        dollarQuoteStart = ``;\n                        str += char;\n                        continue;\n                    }\n                    else if (/[0-9_]/i.test(char) ||\n                        // we allow letters with diacritical marks\n                        char.toLowerCase() !== char.toUpperCase()) {\n                        dollarQuoteStart += char;\n                    }\n                    else {\n                        dollarQuoteStart = ``;\n                    }\n                }\n                if (isBlockCommentFirstChar) {\n                    isBlockCommentFirstChar = false;\n                    if (char === '*') {\n                        isBlockCommentEnd = true;\n                    }\n                    else if (!/\\s/.test(char)) {\n                        isBlockCommentPrinted = true;\n                        str += '/*' + char;\n                    }\n                }\n                else if (isBlockComment) {\n                    if (isBlockCommentPrinted) {\n                        str += char;\n                    }\n                    if (isBlockCommentEnd) {\n                        isBlockCommentEnd = false;\n                        if (char === '/') {\n                            isBlockComment = false;\n                            isBlockCommentPrinted = false;\n                        }\n                    }\n                    else if (char === '*') {\n                        isBlockCommentEnd = true;\n                    }\n                }\n                else if (isLineComment) {\n                    if (char === '\\n') {\n                        str += '\\n';\n                        isLineComment = false;\n                    }\n                }\n                else if (char === quoteChar) {\n                    quoteChar = undefined;\n                    str += char;\n                }\n                else if (quoteChar) {\n                    str += char;\n                }\n                else if (dollarQuote) {\n                    if (dollarQuoteStart) {\n                        dollarQuoteStart += char;\n                        if (dollarQuoteStart === dollarQuote) {\n                            dollarQuote = ``;\n                            dollarQuoteStart = ``;\n                        }\n                    }\n                    if (dollarQuote && char === `$`) {\n                        dollarQuoteStart = `$`;\n                    }\n                    str += char;\n                }\n                else {\n                    switch (char) {\n                        case `'`:\n                        case `\"`:\n                        case '`':\n                            quoteChar = char;\n                            str += char;\n                            break;\n                        case `$`:\n                            dollarQuoteStart = `$`;\n                            str += char;\n                            break;\n                        case `-`:\n                            lineCommentStart = true;\n                            break;\n                        case `/`:\n                            blockCommentStart = true;\n                            break;\n                        case `;`:\n                            if (str.trim()) {\n                                parts.push({ type: web_1.SQLItemType.RAW, text: str });\n                                str = '';\n                            }\n                            if (parts.length) {\n                                parts = [];\n                                queries.push(parts);\n                            }\n                            break;\n                        default:\n                            str += char;\n                            break;\n                    }\n                }\n            }\n            if (lineCommentStart) {\n                str += '-';\n            }\n            if (blockCommentStart) {\n                str += '/';\n            }\n            if (parts.length || str.trim()) {\n                parts.push({ type: web_1.SQLItemType.RAW, text: str });\n            }\n        }\n        else {\n            parts.push(part);\n        }\n    }\n    return queries\n        .filter((parts) => parts.length)\n        .map((parts) => web_1.default.__dangerous__constructFromParts(parts));\n}\n/**\n * Split an SQLQuery into an array of statements\n */\nfunction splitSqlQuery(query) {\n    if (!hasSemicolonBeforeEnd(query))\n        return [query];\n    const split = query.format(splitSqlQueryParts);\n    if (split.length <= 1) {\n        return [query];\n    }\n    else {\n        return split;\n    }\n}\nexports.default = splitSqlQuery;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}