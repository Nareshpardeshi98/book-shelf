{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:/angular/pr1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"D:/angular/pr1/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"D:/angular/pr1/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"D:/angular/pr1/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst connection_pool_1 = require(\"@databases/connection-pool\");\n\nconst split_sql_query_1 = require(\"@databases/split-sql-query\");\n\nconst QueryableType_1 = require(\"./QueryableType\");\n\nconst utils_1 = require(\"./utils\");\n\nconst returnFalse = () => false;\n\nclass BaseConnectionPool {\n  constructor(options, factories) {\n    this.type = QueryableType_1.default.ConnectionPool;\n    this._disposed = false;\n    this._pool = (0, connection_pool_1.default)(options);\n    this._factories = factories;\n  }\n\n  _withDriverFromPool(fn, ...args) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let releasing = false;\n      const driver = yield _this2._pool.getConnection();\n\n      try {\n        const result = yield fn(driver.connection, ...args);\n        releasing = true;\n        driver.release();\n        return result;\n      } catch (ex) {\n        if (releasing) {\n          throw ex;\n        }\n\n        if (yield driver.connection.canRecycleConnectionAfterError(ex).catch(returnFalse)) {\n          releasing = true;\n          driver.release();\n        } else {\n          releasing = true;\n          driver.dispose();\n        }\n\n        throw ex;\n      }\n    })();\n  }\n\n  _throwIfDisposed() {\n    if (this._disposed) {\n      throw new Error('You cannot run any operations on a ConnectionPool after it has been disposed.');\n    }\n  }\n\n  task(fn) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3._throwIfDisposed();\n\n      return _this3._withDriverFromPool(utils_1.taskInternal, _this3._factories, fn);\n    })();\n  }\n\n  tx(fn, options) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4._throwIfDisposed();\n\n      return _this4._withDriverFromPool(utils_1.txInternal, _this4._factories, fn, options);\n    })();\n  }\n\n  query(query) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      (0, utils_1.assertSql)(query);\n\n      _this5._throwIfDisposed();\n\n      if (Array.isArray(query)) {\n        if (query.length === 0) return [];\n        return _this5._withDriverFromPool(utils_1.queryInternal, query, utils_1.executeAndReturnAll);\n      } else {\n        return _this5._withDriverFromPool(utils_1.queryInternal, (0, split_sql_query_1.default)(query), utils_1.executeAndReturnLast);\n      }\n    })();\n  }\n\n  addPostCommitStep(fn) {\n    return _asyncToGenerator(function* () {\n      yield fn();\n    })();\n  }\n\n  queryStream(query, options) {\n    var _this = this;\n\n    return _wrapAsyncGenerator(function* () {\n      (0, utils_1.assertSql)(query);\n\n      _this._throwIfDisposed();\n\n      const poolRecord = yield _awaitAsyncGenerator(_this._pool.getConnection());\n\n      try {\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n\n        var _iteratorError;\n\n        try {\n          for (var _iterator = _asyncIterator(poolRecord.connection.queryStream(query, options)), _step; _iteratorAbruptCompletion = !(_step = yield _awaitAsyncGenerator(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n            const record = _step.value;\n            yield record;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              yield _awaitAsyncGenerator(_iterator.return());\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } finally {\n        poolRecord.dispose();\n      }\n    })();\n  }\n\n  dispose() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      _this6._disposed = true;\n      yield _this6._pool.drain();\n    })();\n  }\n\n}\n\nexports.default = BaseConnectionPool;","map":{"version":3,"names":["Object","defineProperty","exports","value","connection_pool_1","require","split_sql_query_1","QueryableType_1","utils_1","returnFalse","BaseConnectionPool","constructor","options","factories","type","default","ConnectionPool","_disposed","_pool","_factories","_withDriverFromPool","fn","args","releasing","driver","getConnection","result","connection","release","ex","canRecycleConnectionAfterError","catch","dispose","_throwIfDisposed","Error","task","taskInternal","tx","txInternal","query","assertSql","Array","isArray","length","queryInternal","executeAndReturnAll","executeAndReturnLast","addPostCommitStep","queryStream","poolRecord","record","drain"],"sources":["D:/angular/pr1/node_modules/@databases/shared/lib/BaseConnectionPool.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst connection_pool_1 = require(\"@databases/connection-pool\");\nconst split_sql_query_1 = require(\"@databases/split-sql-query\");\nconst QueryableType_1 = require(\"./QueryableType\");\nconst utils_1 = require(\"./utils\");\nconst returnFalse = () => false;\nclass BaseConnectionPool {\n    constructor(options, factories) {\n        this.type = QueryableType_1.default.ConnectionPool;\n        this._disposed = false;\n        this._pool = (0, connection_pool_1.default)(options);\n        this._factories = factories;\n    }\n    async _withDriverFromPool(fn, ...args) {\n        let releasing = false;\n        const driver = await this._pool.getConnection();\n        try {\n            const result = await fn(driver.connection, ...args);\n            releasing = true;\n            driver.release();\n            return result;\n        }\n        catch (ex) {\n            if (releasing) {\n                throw ex;\n            }\n            if (await driver.connection\n                .canRecycleConnectionAfterError(ex)\n                .catch(returnFalse)) {\n                releasing = true;\n                driver.release();\n            }\n            else {\n                releasing = true;\n                driver.dispose();\n            }\n            throw ex;\n        }\n    }\n    _throwIfDisposed() {\n        if (this._disposed) {\n            throw new Error('You cannot run any operations on a ConnectionPool after it has been disposed.');\n        }\n    }\n    async task(fn) {\n        this._throwIfDisposed();\n        return this._withDriverFromPool(utils_1.taskInternal, this._factories, fn);\n    }\n    async tx(fn, options) {\n        this._throwIfDisposed();\n        return this._withDriverFromPool(utils_1.txInternal, this._factories, fn, options);\n    }\n    async query(query) {\n        (0, utils_1.assertSql)(query);\n        this._throwIfDisposed();\n        if (Array.isArray(query)) {\n            if (query.length === 0)\n                return [];\n            return this._withDriverFromPool(utils_1.queryInternal, query, utils_1.executeAndReturnAll);\n        }\n        else {\n            return this._withDriverFromPool(utils_1.queryInternal, (0, split_sql_query_1.default)(query), utils_1.executeAndReturnLast);\n        }\n    }\n    async addPostCommitStep(fn) {\n        await fn();\n    }\n    async *queryStream(query, options) {\n        (0, utils_1.assertSql)(query);\n        this._throwIfDisposed();\n        const poolRecord = await this._pool.getConnection();\n        try {\n            for await (const record of poolRecord.connection.queryStream(query, options)) {\n                yield record;\n            }\n        }\n        finally {\n            poolRecord.dispose();\n        }\n    }\n    async dispose() {\n        this._disposed = true;\n        await this._pool.drain();\n    }\n}\nexports.default = BaseConnectionPool;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}