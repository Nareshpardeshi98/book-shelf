{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:/angular/pr1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"D:/angular/pr1/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"D:/angular/pr1/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"D:/angular/pr1/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst split_sql_query_1 = require(\"@databases/split-sql-query\");\n\nconst QueryableType_1 = require(\"./QueryableType\");\n\nconst utils_1 = require(\"./utils\");\n\nconst lock_1 = require(\"@databases/lock\");\n\nclass BaseConnection {\n  constructor(driver, factories) {\n    this.type = QueryableType_1.default.Connection;\n    this._driver = driver;\n    this._factories = factories;\n    this._lock = (0, lock_1.createLock)(driver.acquireLockTimeoutMilliseconds);\n  }\n\n  _throwIfDisposed() {\n    if (this._disposed) {\n      throw new Error('You cannot run any operations on a Connection after it has been returned to the pool.');\n    }\n  }\n\n  task(fn) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2._throwIfDisposed();\n\n      return yield fn(_this2);\n    })();\n  }\n\n  tx(fn, options) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3._throwIfDisposed();\n\n      yield _this3._lock.acquireLock();\n\n      try {\n        return yield (0, utils_1.txInternal)(_this3._driver, _this3._factories, fn, options);\n      } finally {\n        _this3._lock.releaseLock();\n      }\n    })();\n  }\n\n  query(query) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      (0, utils_1.assertSql)(query);\n\n      _this4._throwIfDisposed();\n\n      if (Array.isArray(query)) {\n        if (query.length === 0) return [];\n        yield _this4._lock.acquireLock();\n\n        try {\n          return yield (0, utils_1.queryInternal)(_this4._driver, query, utils_1.executeAndReturnAll);\n        } finally {\n          _this4._lock.releaseLock();\n        }\n      } else {\n        yield _this4._lock.acquireLock();\n\n        try {\n          return yield (0, utils_1.queryInternal)(_this4._driver, (0, split_sql_query_1.default)(query), utils_1.executeAndReturnLast);\n        } finally {\n          _this4._lock.releaseLock();\n        }\n      }\n    })();\n  }\n\n  addPostCommitStep(fn) {\n    return _asyncToGenerator(function* () {\n      yield fn();\n    })();\n  }\n\n  queryStream(query, options) {\n    var _this = this;\n\n    return _wrapAsyncGenerator(function* () {\n      (0, utils_1.assertSql)(query);\n\n      _this._throwIfDisposed();\n\n      yield _awaitAsyncGenerator(_this._lock.acquireLock());\n\n      try {\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n\n        var _iteratorError;\n\n        try {\n          for (var _iterator = _asyncIterator(_this._driver.queryStream(query, options)), _step; _iteratorAbruptCompletion = !(_step = yield _awaitAsyncGenerator(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n            const record = _step.value;\n            yield record;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              yield _awaitAsyncGenerator(_iterator.return());\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } finally {\n        _this._lock.releaseLock();\n      }\n    })();\n  }\n\n  dispose() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this5._disposed || (_this5._disposed = _this5._lock.pool());\n    })();\n  }\n\n}\n\nexports.default = BaseConnection;","map":{"version":3,"names":["Object","defineProperty","exports","value","split_sql_query_1","require","QueryableType_1","utils_1","lock_1","BaseConnection","constructor","driver","factories","type","default","Connection","_driver","_factories","_lock","createLock","acquireLockTimeoutMilliseconds","_throwIfDisposed","_disposed","Error","task","fn","tx","options","acquireLock","txInternal","releaseLock","query","assertSql","Array","isArray","length","queryInternal","executeAndReturnAll","executeAndReturnLast","addPostCommitStep","queryStream","record","dispose","pool"],"sources":["D:/angular/pr1/node_modules/@databases/shared/lib/BaseConnection.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst split_sql_query_1 = require(\"@databases/split-sql-query\");\nconst QueryableType_1 = require(\"./QueryableType\");\nconst utils_1 = require(\"./utils\");\nconst lock_1 = require(\"@databases/lock\");\nclass BaseConnection {\n    constructor(driver, factories) {\n        this.type = QueryableType_1.default.Connection;\n        this._driver = driver;\n        this._factories = factories;\n        this._lock = (0, lock_1.createLock)(driver.acquireLockTimeoutMilliseconds);\n    }\n    _throwIfDisposed() {\n        if (this._disposed) {\n            throw new Error('You cannot run any operations on a Connection after it has been returned to the pool.');\n        }\n    }\n    async task(fn) {\n        this._throwIfDisposed();\n        return await fn(this);\n    }\n    async tx(fn, options) {\n        this._throwIfDisposed();\n        await this._lock.acquireLock();\n        try {\n            return await (0, utils_1.txInternal)(this._driver, this._factories, fn, options);\n        }\n        finally {\n            this._lock.releaseLock();\n        }\n    }\n    async query(query) {\n        (0, utils_1.assertSql)(query);\n        this._throwIfDisposed();\n        if (Array.isArray(query)) {\n            if (query.length === 0)\n                return [];\n            await this._lock.acquireLock();\n            try {\n                return await (0, utils_1.queryInternal)(this._driver, query, utils_1.executeAndReturnAll);\n            }\n            finally {\n                this._lock.releaseLock();\n            }\n        }\n        else {\n            await this._lock.acquireLock();\n            try {\n                return await (0, utils_1.queryInternal)(this._driver, (0, split_sql_query_1.default)(query), utils_1.executeAndReturnLast);\n            }\n            finally {\n                this._lock.releaseLock();\n            }\n        }\n    }\n    async addPostCommitStep(fn) {\n        await fn();\n    }\n    async *queryStream(query, options) {\n        (0, utils_1.assertSql)(query);\n        this._throwIfDisposed();\n        await this._lock.acquireLock();\n        try {\n            for await (const record of this._driver.queryStream(query, options)) {\n                yield record;\n            }\n        }\n        finally {\n            this._lock.releaseLock();\n        }\n    }\n    async dispose() {\n        return this._disposed || (this._disposed = this._lock.pool());\n    }\n}\nexports.default = BaseConnection;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}