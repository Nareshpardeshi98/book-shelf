{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:/angular/pr1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PoolOptionsObject = void 0;\n\nconst errors_1 = require(\"./utils/errors\");\n\nconst timeout_1 = require(\"./utils/timeout\");\n\nfunction zeroToInfinity(value, defaultValue = Infinity) {\n  if (value === undefined) {\n    return defaultValue;\n  } else if (value === 0) {\n    return Infinity;\n  } else {\n    return value;\n  }\n}\n\nclass PoolOptionsObject {\n  constructor(options) {\n    this._onConnectionAfterTimeout = connection => {\n      void this.closeConnection(connection);\n    };\n\n    this._onConnectionClosed = timeout => {\n      if ((0, timeout_1.isTimeout)(timeout)) {\n        if (this._options.onTimeoutClosingConnection) {\n          this._options.onTimeoutClosingConnection();\n        } else {\n          console.warn(`pool.closeConnetion timed out after ${this._closeConnectionTimeoutMilliseconds}ms`);\n        }\n      }\n    };\n\n    this._onConnectionError = err => {\n      if (this._options.onErrorClosingConnection) {\n        this._options.onErrorClosingConnection(err);\n      } else {\n        console.error(`Error closing connection: ${err.stack}`);\n      }\n    };\n\n    this._options = options;\n    this.maxSize = zeroToInfinity(options.maxSize);\n    this.maxUses = zeroToInfinity(options.maxUses);\n    this.idleTimeoutMilliseconds = zeroToInfinity(options.idleTimeoutMilliseconds);\n    this.releaseTimeoutMilliseconds = zeroToInfinity(options.releaseTimeoutMilliseconds);\n    this.queueTimeoutMilliseconds = zeroToInfinity(options.queueTimeoutMilliseconds);\n    this._openConnectionTimeoutMilliseconds = zeroToInfinity(options.openConnectionTimeoutMilliseconds, 60000);\n    this._closeConnectionTimeoutMilliseconds = zeroToInfinity(options.closeConnectionTimeoutMilliseconds, 60000);\n    this.connectionLimitBackoffMilliseconds = options.connectionLimitBackoffMilliseconds || 5000;\n\n    if (this._options.releaseTimeoutMilliseconds !== undefined && !this._options.onReleaseTimeout) {\n      throw new Error(`If you specify releaseTimeoutMilliseconds you must provide a handler for onReleaseTimeout`);\n    }\n  }\n\n  openConnection(removeFromPool) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, timeout_1.withTimeout)(_this._options.openConnection, {\n        timeoutMilliseconds: _this._openConnectionTimeoutMilliseconds,\n        onResultAfterTimeout: _this._onConnectionAfterTimeout\n      }, removeFromPool);\n    })();\n  }\n\n  closeConnection(connection) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, timeout_1.withTimeout)(_this2._options.closeConnection, {\n        timeoutMilliseconds: _this2._closeConnectionTimeoutMilliseconds\n      }, connection).then(_this2._onConnectionClosed, _this2._onConnectionError).catch(errors_1.globalError);\n    })();\n  }\n\n  onActive(connection) {\n    return (0, errors_1.attemptHook)(this._options.onActive, connection);\n  }\n\n  onIdle(connection) {\n    return (0, errors_1.attemptHook)(this._options.onIdle, connection);\n  }\n\n  onReleaseTimeout(connection) {\n    void (0, timeout_1.withTimeout)(this._options.onReleaseTimeout, {\n      timeoutMilliseconds: this._closeConnectionTimeoutMilliseconds\n    }, connection).then(this._onConnectionClosed, this._onConnectionError).catch(errors_1.globalError);\n  }\n\n  isConnectionLimitError(err) {\n    try {\n      return this._options.isConnectionLimitError ? this._options.isConnectionLimitError(err) : false;\n    } catch (ex) {\n      (0, errors_1.globalError)(ex);\n      return false;\n    }\n  }\n\n}\n\nexports.PoolOptionsObject = PoolOptionsObject;","map":{"version":3,"names":["Object","defineProperty","exports","value","PoolOptionsObject","errors_1","require","timeout_1","zeroToInfinity","defaultValue","Infinity","undefined","constructor","options","_onConnectionAfterTimeout","connection","closeConnection","_onConnectionClosed","timeout","isTimeout","_options","onTimeoutClosingConnection","console","warn","_closeConnectionTimeoutMilliseconds","_onConnectionError","err","onErrorClosingConnection","error","stack","maxSize","maxUses","idleTimeoutMilliseconds","releaseTimeoutMilliseconds","queueTimeoutMilliseconds","_openConnectionTimeoutMilliseconds","openConnectionTimeoutMilliseconds","closeConnectionTimeoutMilliseconds","connectionLimitBackoffMilliseconds","onReleaseTimeout","Error","openConnection","removeFromPool","withTimeout","timeoutMilliseconds","onResultAfterTimeout","then","catch","globalError","onActive","attemptHook","onIdle","isConnectionLimitError","ex"],"sources":["D:/angular/pr1/node_modules/@databases/connection-pool/lib/PoolOptions.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PoolOptionsObject = void 0;\nconst errors_1 = require(\"./utils/errors\");\nconst timeout_1 = require(\"./utils/timeout\");\nfunction zeroToInfinity(value, defaultValue = Infinity) {\n    if (value === undefined) {\n        return defaultValue;\n    }\n    else if (value === 0) {\n        return Infinity;\n    }\n    else {\n        return value;\n    }\n}\nclass PoolOptionsObject {\n    constructor(options) {\n        this._onConnectionAfterTimeout = (connection) => {\n            void this.closeConnection(connection);\n        };\n        this._onConnectionClosed = (timeout) => {\n            if ((0, timeout_1.isTimeout)(timeout)) {\n                if (this._options.onTimeoutClosingConnection) {\n                    this._options.onTimeoutClosingConnection();\n                }\n                else {\n                    console.warn(`pool.closeConnetion timed out after ${this._closeConnectionTimeoutMilliseconds}ms`);\n                }\n            }\n        };\n        this._onConnectionError = (err) => {\n            if (this._options.onErrorClosingConnection) {\n                this._options.onErrorClosingConnection(err);\n            }\n            else {\n                console.error(`Error closing connection: ${err.stack}`);\n            }\n        };\n        this._options = options;\n        this.maxSize = zeroToInfinity(options.maxSize);\n        this.maxUses = zeroToInfinity(options.maxUses);\n        this.idleTimeoutMilliseconds = zeroToInfinity(options.idleTimeoutMilliseconds);\n        this.releaseTimeoutMilliseconds = zeroToInfinity(options.releaseTimeoutMilliseconds);\n        this.queueTimeoutMilliseconds = zeroToInfinity(options.queueTimeoutMilliseconds);\n        this._openConnectionTimeoutMilliseconds = zeroToInfinity(options.openConnectionTimeoutMilliseconds, 60000);\n        this._closeConnectionTimeoutMilliseconds = zeroToInfinity(options.closeConnectionTimeoutMilliseconds, 60000);\n        this.connectionLimitBackoffMilliseconds =\n            options.connectionLimitBackoffMilliseconds || 5000;\n        if (this._options.releaseTimeoutMilliseconds !== undefined &&\n            !this._options.onReleaseTimeout) {\n            throw new Error(`If you specify releaseTimeoutMilliseconds you must provide a handler for onReleaseTimeout`);\n        }\n    }\n    async openConnection(removeFromPool) {\n        return (0, timeout_1.withTimeout)(this._options.openConnection, {\n            timeoutMilliseconds: this._openConnectionTimeoutMilliseconds,\n            onResultAfterTimeout: this._onConnectionAfterTimeout,\n        }, removeFromPool);\n    }\n    async closeConnection(connection) {\n        return (0, timeout_1.withTimeout)(this._options.closeConnection, { timeoutMilliseconds: this._closeConnectionTimeoutMilliseconds }, connection)\n            .then(this._onConnectionClosed, this._onConnectionError)\n            .catch(errors_1.globalError);\n    }\n    onActive(connection) {\n        return (0, errors_1.attemptHook)(this._options.onActive, connection);\n    }\n    onIdle(connection) {\n        return (0, errors_1.attemptHook)(this._options.onIdle, connection);\n    }\n    onReleaseTimeout(connection) {\n        void (0, timeout_1.withTimeout)(this._options.onReleaseTimeout, { timeoutMilliseconds: this._closeConnectionTimeoutMilliseconds }, connection)\n            .then(this._onConnectionClosed, this._onConnectionError)\n            .catch(errors_1.globalError);\n    }\n    isConnectionLimitError(err) {\n        try {\n            return this._options.isConnectionLimitError\n                ? this._options.isConnectionLimitError(err)\n                : false;\n        }\n        catch (ex) {\n            (0, errors_1.globalError)(ex);\n            return false;\n        }\n    }\n}\nexports.PoolOptionsObject = PoolOptionsObject;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}