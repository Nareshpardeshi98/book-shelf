{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MySqlConfigSchema = exports.TypesConfigSchema = exports.MySqlTypesPrimaryKeyTypeMode = exports.TestConfigSchema = void 0;\n\nconst ft = require(\"funtypes\");\n\nfunction withDefault(type, defaultValue) {\n  return ft.Union(type, ft.Undefined.withParser({\n    parse() {\n      return {\n        success: true,\n        value: defaultValue\n      };\n    },\n\n    name: `undefined`\n  }));\n}\n\nfunction integer({\n  min = -Math.pow(2, 31),\n  max = Math.pow(2, 32)\n}) {\n  return ft.Number.withConstraint(value => {\n    if (value !== Math.floor(value)) {\n      return `Expected an integer but got ${value}`;\n    }\n\n    if (value < min || value > max) {\n      return `Expected an integer between ${min} and ${max} but got ${value}`;\n    }\n\n    return true;\n  }, {\n    name: `Integer`\n  });\n}\n\nexports.TestConfigSchema = ft.Object({\n  debug: withDefault(ft.Boolean, false),\n  migrationsScript: ft.Union(ft.String, ft.Array(ft.String), ft.Undefined),\n  image: withDefault(ft.String, `mysql:8.0.23`),\n  containerName: withDefault(ft.String, `mysql-test`),\n  connectTimeoutSeconds: withDefault(integer({\n    min: 0\n  }), 20),\n  port: withDefault(integer({\n    min: 0,\n    max: 65535\n  }), undefined),\n  mySqlUser: withDefault(ft.String, `test-user`),\n  mySqlPassword: withDefault(ft.String, `password`),\n  mySqlDb: withDefault(ft.String, `test-db`)\n}).withConstraint(value => true, {\n  name: `TestConfig`\n});\nvar MySqlTypesPrimaryKeyTypeMode;\n\n(function (MySqlTypesPrimaryKeyTypeMode) {\n  MySqlTypesPrimaryKeyTypeMode[\"strict_brand\"] = \"strict_brand\";\n  MySqlTypesPrimaryKeyTypeMode[\"loose_brand\"] = \"loose_brand\";\n  MySqlTypesPrimaryKeyTypeMode[\"inline_strict_brand\"] = \"inline_strict_brand\";\n  MySqlTypesPrimaryKeyTypeMode[\"inline_loose_brand\"] = \"inline_loose_brand\";\n  MySqlTypesPrimaryKeyTypeMode[\"inline_no_brand\"] = \"inline_no_brand\";\n})(MySqlTypesPrimaryKeyTypeMode = exports.MySqlTypesPrimaryKeyTypeMode || (exports.MySqlTypesPrimaryKeyTypeMode = {}));\n\nexports.TypesConfigSchema = ft.Object({\n  directory: withDefault(ft.String, `__generated__`),\n  primaryKeyTypeMode: withDefault(ft.Enum(`MySqlTypesPrimaryKeyTypeMode`, MySqlTypesPrimaryKeyTypeMode), MySqlTypesPrimaryKeyTypeMode.inline_loose_brand),\n  primaryKeyTypeName: withDefault(ft.String, `{{ TABLE_NAME | pascal-case }}_{{ COLUMN_NAME | pascal-case }}`),\n  primaryKeyFileName: withDefault(ft.String, `{{ TABLE_NAME }}.ts`),\n  tableTypeName: withDefault(ft.String, `{{ TABLE_NAME | pascal-case }}`),\n  tableFileName: withDefault(ft.String, `{{ TABLE_NAME }}.ts`),\n  tableInsertParametersTypeName: withDefault(ft.String, `{{ TABLE_NAME | pascal-case }}_InsertParameters`),\n  tableInsertParametersFileName: withDefault(ft.String, `{{ TABLE_NAME }}.ts`),\n  schemaTypeName: withDefault(ft.String, `DatabaseSchema`),\n  schemaFileName: withDefault(ft.String, `index.ts`),\n  serializeValueTypeName: withDefault(ft.String, `serializeValue`),\n  serializeValueFileName: withDefault(ft.String, `index.ts`),\n  columnTypeOverrides: withDefault(ft.Record(ft.String, ft.String), {}),\n  typeOverrides: withDefault(ft.Record(ft.String, ft.String), {}),\n  includeTables: withDefault(ft.Union(ft.Array(ft.String), ft.Null), null),\n  ignoreTables: withDefault(ft.Array(ft.String), [])\n}).withConstraint(value => true, {\n  name: `TypesConfig`\n});\nexports.MySqlConfigSchema = ft.Object({\n  connectionStringEnvironmentVariable: withDefault(ft.String, `DATABASE_URL`),\n  test: withDefault(exports.TestConfigSchema, exports.TestConfigSchema.parse({})),\n  types: withDefault(exports.TypesConfigSchema, exports.TypesConfigSchema.parse({}))\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","MySqlConfigSchema","TypesConfigSchema","MySqlTypesPrimaryKeyTypeMode","TestConfigSchema","ft","require","withDefault","type","defaultValue","Union","Undefined","withParser","parse","success","name","integer","min","Math","pow","max","Number","withConstraint","floor","debug","Boolean","migrationsScript","String","Array","image","containerName","connectTimeoutSeconds","port","undefined","mySqlUser","mySqlPassword","mySqlDb","directory","primaryKeyTypeMode","Enum","inline_loose_brand","primaryKeyTypeName","primaryKeyFileName","tableTypeName","tableFileName","tableInsertParametersTypeName","tableInsertParametersFileName","schemaTypeName","schemaFileName","serializeValueTypeName","serializeValueFileName","columnTypeOverrides","Record","typeOverrides","includeTables","Null","ignoreTables","connectionStringEnvironmentVariable","test","types"],"sources":["D:/angular/pr1/node_modules/@databases/mysql-config/lib/MySqlConfig.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MySqlConfigSchema = exports.TypesConfigSchema = exports.MySqlTypesPrimaryKeyTypeMode = exports.TestConfigSchema = void 0;\nconst ft = require(\"funtypes\");\nfunction withDefault(type, defaultValue) {\n    return ft.Union(type, ft.Undefined.withParser({\n        parse() {\n            return { success: true, value: defaultValue };\n        },\n        name: `undefined`,\n    }));\n}\nfunction integer({ min = -Math.pow(2, 31), max = Math.pow(2, 32), }) {\n    return ft.Number.withConstraint((value) => {\n        if (value !== Math.floor(value)) {\n            return `Expected an integer but got ${value}`;\n        }\n        if (value < min || value > max) {\n            return `Expected an integer between ${min} and ${max} but got ${value}`;\n        }\n        return true;\n    }, { name: `Integer` });\n}\nexports.TestConfigSchema = ft\n    .Object({\n    debug: withDefault(ft.Boolean, false),\n    migrationsScript: ft.Union(ft.String, ft.Array(ft.String), ft.Undefined),\n    image: withDefault(ft.String, `mysql:8.0.23`),\n    containerName: withDefault(ft.String, `mysql-test`),\n    connectTimeoutSeconds: withDefault(integer({ min: 0 }), 20),\n    port: withDefault(integer({ min: 0, max: 65535 }), undefined),\n    mySqlUser: withDefault(ft.String, `test-user`),\n    mySqlPassword: withDefault(ft.String, `password`),\n    mySqlDb: withDefault(ft.String, `test-db`),\n})\n    .withConstraint((value) => true, { name: `TestConfig` });\nvar MySqlTypesPrimaryKeyTypeMode;\n(function (MySqlTypesPrimaryKeyTypeMode) {\n    MySqlTypesPrimaryKeyTypeMode[\"strict_brand\"] = \"strict_brand\";\n    MySqlTypesPrimaryKeyTypeMode[\"loose_brand\"] = \"loose_brand\";\n    MySqlTypesPrimaryKeyTypeMode[\"inline_strict_brand\"] = \"inline_strict_brand\";\n    MySqlTypesPrimaryKeyTypeMode[\"inline_loose_brand\"] = \"inline_loose_brand\";\n    MySqlTypesPrimaryKeyTypeMode[\"inline_no_brand\"] = \"inline_no_brand\";\n})(MySqlTypesPrimaryKeyTypeMode = exports.MySqlTypesPrimaryKeyTypeMode || (exports.MySqlTypesPrimaryKeyTypeMode = {}));\nexports.TypesConfigSchema = ft\n    .Object({\n    directory: withDefault(ft.String, `__generated__`),\n    primaryKeyTypeMode: withDefault(ft.Enum(`MySqlTypesPrimaryKeyTypeMode`, MySqlTypesPrimaryKeyTypeMode), MySqlTypesPrimaryKeyTypeMode.inline_loose_brand),\n    primaryKeyTypeName: withDefault(ft.String, `{{ TABLE_NAME | pascal-case }}_{{ COLUMN_NAME | pascal-case }}`),\n    primaryKeyFileName: withDefault(ft.String, `{{ TABLE_NAME }}.ts`),\n    tableTypeName: withDefault(ft.String, `{{ TABLE_NAME | pascal-case }}`),\n    tableFileName: withDefault(ft.String, `{{ TABLE_NAME }}.ts`),\n    tableInsertParametersTypeName: withDefault(ft.String, `{{ TABLE_NAME | pascal-case }}_InsertParameters`),\n    tableInsertParametersFileName: withDefault(ft.String, `{{ TABLE_NAME }}.ts`),\n    schemaTypeName: withDefault(ft.String, `DatabaseSchema`),\n    schemaFileName: withDefault(ft.String, `index.ts`),\n    serializeValueTypeName: withDefault(ft.String, `serializeValue`),\n    serializeValueFileName: withDefault(ft.String, `index.ts`),\n    columnTypeOverrides: withDefault(ft.Record(ft.String, ft.String), {}),\n    typeOverrides: withDefault(ft.Record(ft.String, ft.String), {}),\n    includeTables: withDefault(ft.Union(ft.Array(ft.String), ft.Null), null),\n    ignoreTables: withDefault(ft.Array(ft.String), []),\n})\n    .withConstraint((value) => true, { name: `TypesConfig` });\nexports.MySqlConfigSchema = ft.Object({\n    connectionStringEnvironmentVariable: withDefault(ft.String, `DATABASE_URL`),\n    test: withDefault(exports.TestConfigSchema, exports.TestConfigSchema.parse({})),\n    types: withDefault(exports.TypesConfigSchema, exports.TypesConfigSchema.parse({})),\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}